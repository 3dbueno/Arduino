byte number = 0;

void setup() {
  Serial.begin(9600);
}

void loop() {
  if (Serial.available()) {
    number = Serial.read();
    Serial.print("character received: ");
    Serial.println(number, DEC);
  }
}



      /*
       // Method: tapering off and reverse direction control
      // calculate target PWM
      if (bv[CHANNEL_BATTERY] <= TAPEROFFVOLTAGE)
        targetPulseWidth = MAXPWM;
      if (bv[CHANNEL_BATTERY] >= MAXVOLTAGE)
        targetPulseWidth = 0;
      if (bv[CHANNEL_BATTERY]  > TAPEROFFVOLTAGE && bv[CHANNEL_BATTERY]  < MAXVOLTAGE)
        targetPulseWidth = MAXPWM * (MAXVOLTAGE - bv[CHANNEL_BATTERY]) / (MAXVOLTAGE - TAPEROFFVOLTAGE);
      


      // Determine if PWM change is required

      if ((targetPulseWidth - pulseWidth) > 40)
        PWMGoUp = true;
      if ((pulseWidth - targetPulseWidth) > 40)
        PWMGoUp = false;

      if (pulseWidth < targetPulseWidth ) {
        if (PWMGoUp == true) {
          if (abs(pulseWidth - targetPulseWidth) > 10)
            pulseWidth += 5;
          else
            pulseWidth++;
          pwmWrite(PWM_OUT, pulseWidth);
        }
      }
      if (pulseWidth > targetPulseWidth ) {
        if (PWMGoUp == false) {
          if (abs(pulseWidth - targetPulseWidth) > 10)
            pulseWidth -= 5;
          else
            pulseWidth--;
          pwmWrite(PWM_OUT, pulseWidth);
        }
      }
      */
      
      
      
  count++;
  // yellow LED and I2C arbitration
  if (bv[CHANNEL_BATTERY] <= 7.5)
    ontime = 10;
  if (bv[CHANNEL_BATTERY] > 7.5 && bv[CHANNEL_BATTERY] <= 8.35)
    ontime = 2000 * (bv[CHANNEL_BATTERY] - 7.5);
  if (bv[CHANNEL_BATTERY] > 8.35)
    ontime = 1950;
  offtime = 2000 - ontime;
  //Serial.print(ontime);
  //Serial.print(" ");
  //Serial.println(offtime);
  digitalWrite(CHARGE_LED, HIGH);
  delay(ontime);
  digitalWrite(CHARGE_LED, LOW);
  delay(offtime);

  // give the Pi enough time to query the INA3221 through I2C
  digitalWrite(CHARGE_LED, HIGH);
  delay(1000);






        //int new_PWM = Serial.parseInt();

        //if (Serial.read() == '\n') {
        //Serial.println(new_PWM);


        //}



#define BUTTON_PWM_ENABLE BUTTON_RIGHT  // DIP switch 2


boolean PWMGoUp = true;
boolean PWMOnOff = true;
      if (buttons & BUTTON_PWM_ENABLE) {
        digitalWrite(PWM_ENABLE_PIN, LOW);
        PWMOnOff = false;
      }
      else
      {
        digitalWrite(PWM_ENABLE_PIN, HIGH);
        PWMOnOff = true;
      }

    if (PWMOnOff == true)
      memcpy(&line[2][13], "ON ", 3);
    else
      memcpy(&line[2][13], "OFF", 3);



      /*

            if (bv[CHANNEL_SOLAR] < 9.5) {
              digitalWrite(PWM_ENABLE_PIN, LOW);
              PWMOnOff = false;
            }
            else
            {
              digitalWrite(PWM_ENABLE_PIN, HIGH);
              PWMOnOff = true;
      */    //    }


      pulseWidth = requestedPulseWidth;
      pwmWrite(PWM_OUT, pulseWidth);




//#define SWVERSION "SW 2016-06-05 23:47"
//#define SWVERSION "SW 2016-07-07 20:51"
//#define SWVERSION "SW 2016-07-25 15:46"
//#define SWVERSION "SW 2016-08-24 18:08"
//#define SWVERSION "SW 2016-08-29 23:01"
//#define SWVERSION "SW 2016-09-05 01:42"

//#define SWVERSION "SW 2016-09-23 01:22"









  // check if pi is running
  pwhist[0] = pwhist[1];
  pwhist[1] = pwhist[2];
  pwhist[2] = pw[CHANNEL_SOLAR] + pw[CHANNEL_BATTERY];
  powerConsumption = (pwhist[0] + pwhist[1] + pwhist[2]) / 3.;
  Serial.print(pwhist[0]);
  Serial.print(" ");
  Serial.print(pwhist[1]);
  Serial.print(" ");
  Serial.print(pwhist[2]);
  Serial.print(" ");
  Serial.print(" average power consumption ");
  Serial.println(powerConsumption);
  //if (powerConsumption < 900.0 && bv[CHANNEL_BATTERY] > PI_ON_VOLTAGE)
  //powerCyclePi();


